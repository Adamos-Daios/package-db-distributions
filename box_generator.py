# -*- coding: utf-8 -*-
"""box_generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R60a-Tcd1FFUpon-zTJ4XUkmkOwqFZQ8
"""

"""
Box Database Generator
----------------------

This script generates randomized box specification datasets and exports them as Excel files.

ðŸ“„ Output:
- Excel file named `boxes_database.xlsx`.

ðŸ”§ How to Use:
1. Install pandas if not already installed:
   pip install pandas

2. Open this file.
3. Modify the last line if you want to change the number of records:
   boxes_data = generate_boxes(10000)

   Change `10000` to your desired number (e.g., 500, 1000, 50000, etc.)

4. Run the script:
   python generate_boxes.py

âœ… The Excel file will be saved in your working directory.

ðŸ’¡ Tip:
You can generate multiple datasets by calling `generate_boxes()` with different values and saving each to a separate filename.
"""
import random
import pandas as pd

# Materials and their properties
materials = ["Cardboard", "Plastic", "Wood", "Metal", "Composite"]
material_weights = [0.55, 0.25, 0.10, 0.05, 0.05]

# Thickness options by material
thickness_options = {
    "Cardboard": [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5],
    "Plastic": [0.2, 0.4, 0.6],
    "Wood": [0.3, 0.6, 1.0],
    "Metal": [0.1, 0.2, 0.3],
    "Composite": [0.2, 0.4, 0.6, 0.8]
}

# Probabilities for special attributes
fragile_probs = {
    "Cardboard": 0.30, "Plastic": 0.10, "Wood": 0.10, "Metal": 0.10, "Composite": 0.30
}
stackable_probs = {
    "Cardboard": 0.65, "Plastic": 0.85, "Wood": 0.75, "Metal": 0.95, "Composite": 0.65
}
waterproof_probs = {
    "Cardboard": 0.10, "Plastic": 0.95, "Wood": 0.30, "Metal": 0.90, "Composite": 0.70
}
fire_retardant_probs = {
    "Cardboard": 0.10, "Plastic": 0.20, "Wood": 0.30, "Metal": 0.95, "Composite": 0.75
}

# Temperature ranges
min_temp_ranges = {
    "Cardboard": (-40, -5), "Plastic": (-25, -5), "Wood": (-30, -10),
    "Metal": (-45, -20), "Composite": (-35, -10)
}
max_temp_ranges = {
    "Cardboard": (55, 80), "Plastic": (50, 60), "Wood": (50, 70),
    "Metal": (80, 120), "Composite": (50, 80)
}

# Custom color list
colors = [
    'White', 'Gray', 'Brown', 'Light Brown',
    'Deep Brown', 'Yellow', 'Light Yellow', 'Dark Yellow'
]

# Updated country list
countries = [
    'Greece', 'Germany', 'China', 'USA', 'India', 'Mexico',
    'Japan', 'Australia', 'France'
]

def calculate_load_capacity(material, volume_l, thickness_cm):
    material_multipliers = {
        "Cardboard": 2.5,
        "Plastic": 5.5,
        "Wood": 6.5,
        "Metal": 12,
        "Composite": 8
    }
    multiplier = material_multipliers.get(material, 5)
    load_capacity = volume_l * thickness_cm * multiplier
    return round(min(load_capacity, 500), 2)

def generate_boxes(n):
    boxes = []
    for i in range(n):
        length = random.randint(20, 100)

        width_min = max(5, int(length * 0.05))
        width = random.randint(width_min, length - 1)

        height_min = max(5, int(min(length, width) * 0.05))
        height = random.randint(height_min, min(length, width))  # <-- Your fix applied here

        material = random.choices(materials, weights=material_weights)[0]
        thickness = random.choice(thickness_options[material])

        # Internal dimensions
        internal_length = round(length - 2 * thickness, 2)
        internal_width = round(width - 2 * thickness, 2)
        internal_height = round(height - 2 * thickness, 2)

        ext_volume = round((length * width * height) / 1000, 2)  # in liters
        int_volume = round((internal_length * internal_width * internal_height) / 1000, 2)  # in liters

        max_load = calculate_load_capacity(material, ext_volume, thickness)

        fragile = "Yes" if random.random() < fragile_probs[material] else "No"
        stackable = "Yes" if random.random() < stackable_probs[material] else "No"
        waterproof = "Yes" if random.random() < waterproof_probs[material] else "No"
        fire_retardant = "Yes" if random.random() < fire_retardant_probs[material] else "No"

        # Temperature logic with validation
        while True:
            min_temp = random.randint(*min_temp_ranges[material])
            max_temp = random.randint(*max_temp_ranges[material])
            if min_temp < max_temp:
                break

        color = random.choice(colors)
        country = random.choice(countries)

        box_id = f"BX{i:06d}"
        boxes.append([
            box_id, length, width, height, thickness,
            ext_volume, int_volume, max_load,
            material, fragile, stackable,
            waterproof, fire_retardant,
            min_temp, max_temp,
            color, country
        ])
    return boxes

# Columns and export
columns = [
    "Box ID", "Length (cm)", "Width (cm)", "Height (cm)", "Thickness (cm)",
    "External Volume (L)", "Internal Volume (L)", "Max Load Capacity (kg)",
    "Material", "Fragile", "Stackable",
    "Waterproof", "Fire Retardant",
    "Min Temperature (Â°C)", "Max Temperature (Â°C)",
    "Color", "Country of Origin"
]

boxes_data = generate_boxes(10000)
df = pd.DataFrame(boxes_data, columns=columns)

# Save and download from Google Colab
file_name = "boxes_database.xlsx"
df.to_excel(file_name, index=False)

from google.colab import files
files.download(file_name)
